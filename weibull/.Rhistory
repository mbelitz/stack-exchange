cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names])^2
comp <- (a*c+b*d+2*a*d)/(a^2+a*b+c*d+d^2)
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names])^2
View(calc.comp1)
return(comp)
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a^2+a*b+c*d+d^2)
return(comp)
}
View(calc.comp1)
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a^2+a*b+c*d+d^2)
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names])^2
head(df)
cor(df[,cor_names])^2
cor_names=c('a','b','c','d','comp1','f1','se', use='complete.obs')
cor(df[,cor_names])^2
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
cor(df[,cor_names], use='complete.obs')
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="support-weighted mean F1",
color="F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="support-weighted mean F1",
color="SWM F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=10) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="support-weighted mean F1",
color="SWM F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
df[df$accuracy>.9,]
summary(comp_reg)
comp_reg <- lm(comp1~a+b+c+d)
comp_reg <- lm(comp1~a+b+c+d, data=df)
summary(comp_reg)
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="support-weighted mean F1",
color="SWM F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
comp_reg <- lm(comp1~a+b+c+d, data=df)
summary(comp_reg)
df[df$accuracy>.9,]
df[df$se<.1,]
df[((df$accuracy>.9) && (df$se<.1)),]
> df[((df$accuracy>.9) && (df$se<.3)),]
df[((df$accuracy>.9) && (df$se<.3)),]
df[((df$accuracy>.4) && (df$se<.5)),]
df[((df$accuracy>.9) && (df$se<.5)),]
df[((df$accuracy>.8) && (df$se<.5)),]
df[((df$accuracy>.6) && (df$se<.25)),]
df[((df$accuracy>.6) && (df$se<.5)),]
df[(df$accuracy>.7),][df$se<.2,]
df[(df$accuracy>.9),][df$se<.1,]
library(ggplot2)
set.seed(5)
rand.class <- function(matrix.count=2000, max=100) {
a <- floor(runif(matrix.count, min=0, max=max))
b <- floor(runif(matrix.count, min=0, max=max))
c <- floor(runif(matrix.count, min=0, max=max))
d <- floor(runif(matrix.count, min=0, max=max))
matrix.data <- data.frame(a,b,c,d)
colnames(matrix.data) <- c('a','b','c','d')
return(matrix.data)
}
calc.f1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
f1 <- (a^2+a*b+c*d+d^2)/(a+b+c+d)^2
return(f1)
}
calc.comp1 <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
comp <- (a*c+b*d+2*a*d)/(a+b+c+d)^2
return(comp)
}
calc.acc <- function(vector) {
a <- vector[1]
b <- vector[2]
c <- vector[3]
d <- vector[4]
acc <- (a+d)/(a+b+c+d)
return(acc)
}
df <- rand.class()
df <- cbind(df,
f1=apply(df, 1, calc.f1),
accuracy=apply(df, 1, calc.acc),
comp1=apply(df, 1, calc.comp1),
se=(apply(df, 1, calc.acc)-apply(df, 1, calc.f1))^2)
head(df)
ggplot(df, aes(x=accuracy,y=f1, color=comp1)) +
geom_point() +
labs(x="accuracy",
y="support-weighted mean F1",
color="SWM F1 component") +
scale_color_gradient(low="#13223a", high="#b3c2d8") +
geom_abline(slope=1, intercept=0)
cor_names=c('a','b','c','d','comp1','f1','se')
cor(df[,cor_names], use='complete.obs')^2
comp_reg <- lm(comp1~a+b+c+d, data=df)
summary(comp_reg)
df[(df$accuracy>.9),][df$se<.1,]
View(df)
x<-df[(df$accuracy>.9),]
y<-x[x$se<.1,]
y
x
grid.arrange(dens.plot, cum.plot, nrow=1)
pweibull(5, shape=params[[loc.id]][[1]], scale=params[[loc.id]][[2]])
#fitting separate Weibull distributions for each loc.id (may want to include year.id in the split)
library(fitdistrplus)
#fitting separate Weibull distributions for each loc.id (may want to include year.id in the split)
library(fitdistrplus)
#fitting separate Weibull distributions for each loc.id (may want to include year.id in the split)
library(fitdistrplus)
#fitting separate Weibull distributions for each loc.id (may want to include year.id in the split)
library(fitdistrplus)
fit.weibull <- function(loc) {
y <- summary(fitdist(loc,'weibull'))[[1]]
return(y)
}
params <- lapply(time.sample, fit.weibull) #apply to each element in time sample
#creating predictive model - on a daily rather than weekly domain
predict1.cum.plant <- function(day, loc.id, params) {
pweibull(day, shape=params[[loc.id]][[1]], scale=params[[loc.id]][[2]]*7) #'scaling' 7x the scale parameter
}
predict2.cum.plant <- function(day, loc.id, params) {
pweibull(day/7, shape=params[[loc.id]][[1]], scale=params[[loc.id]][[2]]) #'scaling' 1/7x the random variable
}
source('~/Desktop/RP Computing/Stack_Exchange/weibull/weibull.R', echo=TRUE)
setwd("~/Desktop/RP Computing/Stack_Exchange/weibull")
source('~/Desktop/RP Computing/Stack_Exchange/weibull/weibull.R', echo=TRUE)
pweibull(5, shape=params[[2]][[1]], scale=params[[2]][[2]])
